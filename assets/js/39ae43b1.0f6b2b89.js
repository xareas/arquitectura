"use strict";(self.webpackChunknotification_center=self.webpackChunknotification_center||[]).push([[2837],{8769:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var r=n(4848),a=n(8453);const i={sidebar_position:8},s="Patron Strategy",o={id:"patrones/patron-strategy",title:"Patron Strategy",description:"El patr\xf3n estrategia (Strategy Pattern) es un patr\xf3n de tipo comportamiento (behavioral pattern), es decir, se centra en definir la forma en la que se produce el intercambio de mensajes entre distintos componentes.",source:"@site/docs/patrones/patron-strategy.md",sourceDirName:"patrones",slug:"/patrones/patron-strategy",permalink:"/arquitectura/docs/patrones/patron-strategy",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/patrones/patron-strategy.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Patron Outbox",permalink:"/arquitectura/docs/patrones/patron-outbox"},next:{title:"Patron Facade",permalink:"/arquitectura/docs/patrones/patron-facade"}},c={},l=[{value:"Implementaci\xf3n Makers",id:"implementaci\xf3n-makers",level:2}];function p(e){const t={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"patron-strategy",children:"Patron Strategy"}),"\n",(0,r.jsx)(t.p,{children:"El patr\xf3n estrategia (Strategy Pattern) es un patr\xf3n de tipo comportamiento (behavioral pattern), es decir, se centra en definir la forma en la que se produce el intercambio de mensajes entre distintos componentes.\r\nB\xe1sicamente, su prop\xf3sito es mantener un conjunto de algoritmos (estrategias) de entre los cuales el objeto cliente puede elegir aquel que le conviene e intercambiarlo din\xe1micamente seg\xfan sus necesidades."}),"\n",(0,r.jsx)(t.admonition,{title:"Strategy",type:"tip",children:(0,r.jsx)(t.p,{children:"La inyecci\xf3n de dependencias puede utilizarse para implementar el patr\xf3n Strategy. Por ejemplo, puedes inyectar una implementaci\xf3n espec\xedfica de un algoritmo (una estrategia) en un objeto cliente, permitiendo as\xed que el cliente utilice diferentes estrategias intercambiables sin modificar su c\xf3digo."})}),"\n",(0,r.jsx)(t.h2,{id:"implementaci\xf3n-makers",children:"Implementaci\xf3n Makers"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cs",metastring:'title="IOperationStrategy.cs"',children:" public interface IOperationStrategy\r\n    {\r\n        decimal Calculate();\r\n    }\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cs",metastring:'title="ColombiaOperationStrategy.cs"',children:" public class ColombiaOperationStrategy : IOperationStrategy\r\n    {\r\n        decimal Calculate(){\r\n           return 100;\r\n        }\r\n    }\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cs",metastring:'title="DominicanaOperationStrategy.cs"',children:" public class DominicanaOperationStrategy : IOperationStrategy\r\n    {\r\n        decimal Calculate(){\r\n           return 50;\r\n        }\r\n    }\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cs",metastring:'title="OperationsDomainServices.cs"',children:" public class OperationsDomainServices\r\n    {\r\n       private IOperationStrategy _strategy;\r\n       \r\n       OperationsDomainServices(IOperationStrategy strategy) {\r\n           _strategy = strategy\r\n       }\r\n       \r\n       public decimal BuildOperation() {\r\n          return _strategy.Calculate();\r\n       }\r\n    }\n"})})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>o});var r=n(6540);const a={},i=r.createContext(a);function s(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);