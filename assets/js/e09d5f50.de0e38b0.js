"use strict";(self.webpackChunknotification_center=self.webpackChunknotification_center||[]).push([[5797],{6717:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>l,frontMatter:()=>i,metadata:()=>r,toc:()=>c});var s=o(4848),t=o(8453);const i={sidebar_position:5},d="Eventos",r={id:"ddd/events",title:"Eventos",description:"Los eventos son grandes ordenadores de los procesos de negocio y permiten descubrir y entender flujos complejos que involucran a distintos actores.",source:"@site/docs/ddd/events.md",sourceDirName:"ddd",slug:"/ddd/events",permalink:"/arquitectura/docs/ddd/events",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ddd/events.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Servicios",permalink:"/arquitectura/docs/ddd/services"},next:{title:"Docker",permalink:"/arquitectura/docs/category/docker"}},a={},c=[{value:"Eventos de Dominio",id:"eventos-de-dominio",level:2},{value:"Eventos de Integracion",id:"eventos-de-integracion",level:2}];function u(e){const n={admonition:"admonition",h1:"h1",h2:"h2",img:"img",p:"p",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"eventos",children:"Eventos"}),"\n",(0,s.jsx)(n.p,{children:"Los eventos son grandes ordenadores de los procesos de negocio y permiten descubrir y entender flujos complejos que involucran a distintos actores.\r\nAlgunas tecnicas como Event Storming se basan en focalizarse en los principales eventos que ocurren en una empresa."}),"\n",(0,s.jsxs)(n.p,{children:["Los eventos pueden clasificarse en Eventos de Dominio o Eventos de Integracion. La principal diferencia entre ambos es su contexto.\r\n",(0,s.jsx)(n.img,{alt:"Eventos",src:o(9646).A+"",width:"2012",height:"929"})]}),"\n",(0,s.jsx)(n.h2,{id:"eventos-de-dominio",children:"Eventos de Dominio"}),"\n",(0,s.jsx)(n.p,{children:"Los eventos de dominio son un excelente patr\xf3n para desacoplar un desencadenante de una operaci\xf3n de su implementaci\xf3n. Esto es especialmente \xfatil dentro de las entidades del dominio, ya que los controladores de eventos pueden tener dependencias, mientras que las entidades mismas normalmente no las tienen."}),"\n",(0,s.jsx)(n.admonition,{title:"Evento de Dominio",type:"tip",children:(0,s.jsx)(n.p,{children:"Los eventos de dominio (Domain Events) son uno de los patrones de dise\xf1o t\xe1cticos de Domain Driven Design (DDD)."})}),"\n",(0,s.jsx)(n.p,{children:"Es importante notar que los eventos de dominio no son cuestiones t\xe9cnicas (por ejemplo que se persisti\xf3 una entidad o se clickeo un bot\xf3n) sino que son conceptos del negocio. Nos permiten enriquecer nuestro modelo y el lenguaje ubicuo incorporando hechos.\r\nLos eventos de dominio siempre son internos a un Bounded Context. Son parte de un modelo y de su lenguaje ubicuo. Cada Bounded Context implementa su propio modelo y lenguaje por ende tendr\xe1 sus propios eventos."}),"\n",(0,s.jsx)(n.h2,{id:"eventos-de-integracion",children:"Eventos de Integracion"}),"\n",(0,s.jsx)(n.p,{children:"Un evento de integracion, por el contrario es externo a su contexto delimitado."}),"\n",(0,s.jsx)(n.p,{children:"A la hora de integrar Bounded Contexts es importante recordar que los mismos deben ser aut\xf3nomos. Cada uno es desarrollado de forma independiente y aislada de los dem\xe1s. Su codebase puede ser evolucionado sin miedo a romper funcionalidades de otro Bounded Context. No hay dependencias de c\xf3digo fuente entre Bounded Contexts. Creamos estos contextos para reducir la complejidad de nuestro sistema y poder entregar valor de negocio r\xe1pidamente, por ende es muy importante intentar respetar su autonom\xeda."})]})}function l(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},9646:(e,n,o)=>{o.d(n,{A:()=>s});const s=o.p+"assets/images/events-33cf5665114fd253bf8ba8f391551ee7.png"},8453:(e,n,o)=>{o.d(n,{R:()=>d,x:()=>r});var s=o(6540);const t={},i=s.createContext(t);function d(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);