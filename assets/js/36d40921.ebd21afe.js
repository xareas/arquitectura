"use strict";(self.webpackChunknotification_center=self.webpackChunknotification_center||[]).push([[4182],{3957:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Buenas Practicas y Arquitectura","href":"/arquitectura/docs/intro","docId":"intro","unlisted":false},{"type":"category","label":"Arquitectura Makers","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Diagrama de Capas","href":"/arquitectura/docs/arquitectura/create-a-page","docId":"arquitectura/create-a-page","unlisted":false},{"type":"link","label":".Application","href":"/arquitectura/docs/arquitectura/application","docId":"arquitectura/application","unlisted":false},{"type":"link","label":".Application.Contracts","href":"/arquitectura/docs/arquitectura/application-contracts","docId":"arquitectura/application-contracts","unlisted":false},{"type":"link","label":".Domain","href":"/arquitectura/docs/arquitectura/domain","docId":"arquitectura/domain","unlisted":false},{"type":"link","label":".Domain.Shared","href":"/arquitectura/docs/arquitectura/domain-shared","docId":"arquitectura/domain-shared","unlisted":false},{"type":"link","label":".Infraestructure.EfCore","href":"/arquitectura/docs/arquitectura/infraestructure-efcore","docId":"arquitectura/infraestructure-efcore","unlisted":false}],"href":"/arquitectura/docs/category/arquitectura-makers"},{"type":"category","label":"Patrones Arquitectura","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Patron Adapter","href":"/arquitectura/docs/patrones/patron-adapter","docId":"patrones/patron-adapter","unlisted":false},{"type":"link","label":"Patron Repositorio","href":"/arquitectura/docs/patrones/patron-repository","docId":"patrones/patron-repository","unlisted":false},{"type":"link","label":"Patron Unit Of Work","href":"/arquitectura/docs/patrones/patron-unitofwork","docId":"patrones/patron-unitofwork","unlisted":false},{"type":"link","label":"Patron Specification","href":"/arquitectura/docs/patrones/patron-specification","docId":"patrones/patron-specification","unlisted":false},{"type":"link","label":"Patron Mediator","href":"/arquitectura/docs/patrones/patro-mediator","docId":"patrones/patro-mediator","unlisted":false},{"type":"link","label":"Patron DTO","href":"/arquitectura/docs/patrones/patron-dto","docId":"patrones/patron-dto","unlisted":false},{"type":"link","label":"Patron Result","href":"/arquitectura/docs/patrones/patron-result","docId":"patrones/patron-result","unlisted":false},{"type":"link","label":"Guard Clauses","href":"/arquitectura/docs/patrones/patron-guard","docId":"patrones/patron-guard","unlisted":false},{"type":"link","label":"Patron Outbox","href":"/arquitectura/docs/patrones/patron-outbox","docId":"patrones/patron-outbox","unlisted":false},{"type":"link","label":"Patron Strategy","href":"/arquitectura/docs/patrones/patron-strategy","docId":"patrones/patron-strategy","unlisted":false},{"type":"link","label":"Patron Facade","href":"/arquitectura/docs/patrones/patron-facade","docId":"patrones/patron-facade","unlisted":false},{"type":"link","label":"Patron Null Object","href":"/arquitectura/docs/patrones/patron-nullobject","docId":"patrones/patron-nullobject","unlisted":false},{"type":"link","label":"Patron Saga","href":"/arquitectura/docs/patrones/patron-saga","docId":"patrones/patron-saga","unlisted":false}],"href":"/arquitectura/docs/category/patrones-arquitectura"},{"type":"category","label":"Domain Driven Design","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Que es DDD","href":"/arquitectura/docs/ddd/Intro","docId":"ddd/Intro","unlisted":false},{"type":"link","label":"Entidad de Dominio","href":"/arquitectura/docs/ddd/entities","docId":"ddd/entities","unlisted":false},{"type":"link","label":"Aggregate Root","href":"/arquitectura/docs/ddd/aggregate","docId":"ddd/aggregate","unlisted":false},{"type":"link","label":"Value Objects","href":"/arquitectura/docs/ddd/valueobject","docId":"ddd/valueobject","unlisted":false},{"type":"link","label":"Bounded Context","href":"/arquitectura/docs/ddd/bouncontext","docId":"ddd/bouncontext","unlisted":false},{"type":"link","label":"Servicios","href":"/arquitectura/docs/ddd/services","docId":"ddd/services","unlisted":false},{"type":"link","label":"Eventos","href":"/arquitectura/docs/ddd/events","docId":"ddd/events","unlisted":false}],"href":"/arquitectura/docs/category/domain-driven-design"},{"type":"category","label":"Docker","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Analisis estatico SonarQube","href":"/arquitectura/docs/docker/sonarqube-docker","docId":"docker/sonarqube-docker","unlisted":false}],"href":"/arquitectura/docs/category/docker"},{"type":"category","label":"Principios Software","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Principio SOLID","href":"/arquitectura/docs/principios/solid","docId":"principios/solid","unlisted":false},{"type":"link","label":"Principios KISS","href":"/arquitectura/docs/principios/kiss","docId":"principios/kiss","unlisted":false},{"type":"link","label":"Principio DRY","href":"/arquitectura/docs/principios/dry","docId":"principios/dry","unlisted":false},{"type":"link","label":"Principio YAGNI","href":"/arquitectura/docs/principios/yagni","docId":"principios/yagni","unlisted":false}],"href":"/arquitectura/docs/category/principios-software"},{"type":"category","label":"React Makers","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introducci\xf3n a React Makers","href":"/arquitectura/docs/react-makers/","docId":"react-makers/react-makers","unlisted":false}],"href":"/arquitectura/docs/category/react-makers"},{"type":"category","label":"Bases de Datos","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Tipos de Bases de Datos","href":"/arquitectura/docs/sqlserver/Intro","docId":"sqlserver/Intro","unlisted":false}],"href":"/arquitectura/docs/category/bases-de-datos"},{"type":"category","label":"Makers ADF","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Application Development Framework","href":"/arquitectura/docs/adf/Intro","docId":"adf/Intro","unlisted":false}],"href":"/arquitectura/docs/category/makers-adf"},{"type":"category","label":"Amazon-AWS","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Amazon Web Services","href":"/arquitectura/docs/aws/Intro","docId":"aws/Intro","unlisted":false}],"href":"/arquitectura/docs/category/amazon-aws"},{"type":"category","label":"Librerias","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Librerias Makers","href":"/arquitectura/docs/librerias/librerias-makers","docId":"librerias/librerias-makers","unlisted":false},{"type":"link","label":"Fluent Validations","href":"/arquitectura/docs/librerias/fluent-validation","docId":"librerias/fluent-validation","unlisted":false}],"href":"/arquitectura/docs/category/librerias"},{"type":"category","label":"DevSecOps","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introducci\xf3n a DevOps","href":"/arquitectura/docs/devops/devops-makers","docId":"devops/devops-makers","unlisted":false}],"href":"/arquitectura/docs/category/devsecops"}]},"docs":{"adf/Intro":{"id":"adf/Intro","title":"Application Development Framework","description":"* Makers ADF (Application Development Framework) Version 1.0","sidebar":"tutorialSidebar"},"arquitectura/application":{"id":"arquitectura/application","title":".Application","description":"En esta capa se encuentra la implementacion de los contratos de los aplication services.","sidebar":"tutorialSidebar"},"arquitectura/application-contracts":{"id":"arquitectura/application-contracts","title":".Application.Contracts","description":"Los contratos de aplicaci\xf3n dependen del dominio compartido(Domain.Shared).","sidebar":"tutorialSidebar"},"arquitectura/create-a-page":{"id":"arquitectura/create-a-page","title":"Diagrama de Capas","description":"Esta plantilla proporciona una estructura de aplicaci\xf3n en capas basada en las pr\xe1cticas de dise\xf1o controlado por dominio (DDD).","sidebar":"tutorialSidebar"},"arquitectura/domain":{"id":"arquitectura/domain","title":".Domain","description":"Capa de Dominio","sidebar":"tutorialSidebar"},"arquitectura/domain-shared":{"id":"arquitectura/domain-shared","title":".Domain.Shared","description":"Objetos del dominio compartidos","sidebar":"tutorialSidebar"},"arquitectura/infraestructure-efcore":{"id":"arquitectura/infraestructure-efcore","title":".Infraestructure.EfCore","description":"En una implementaci\xf3n DDD, es posible que tenga una unico proyecto de infraestructura","sidebar":"tutorialSidebar"},"aws/Intro":{"id":"aws/Intro","title":"Amazon Web Services","description":"* AWS Lambda","sidebar":"tutorialSidebar"},"ddd/aggregate":{"id":"ddd/aggregate","title":"Aggregate Root","description":"Los aggregates proveen un agrupamiento l\xf3gico de Entidades y Objetos-Valor.","sidebar":"tutorialSidebar"},"ddd/bouncontext":{"id":"ddd/bouncontext","title":"Bounded Context","description":"Los contextos delimitados consisten en dividir un sistema grande en partes m\xe1s peque\xf1as y manejables, cada una de ellas con modelos y conjuntos de reglas distintos.","sidebar":"tutorialSidebar"},"ddd/entities":{"id":"ddd/entities","title":"Entidad de Dominio","description":"Las entidades representan objetos del dominio y se definen principalmente por su identidad, continuidad y persistencia en el tiempo y no solo por los atributos que las componen. Como dice Eric Evans, \\"un objeto definido principalmente por su identidad se denomina Entidad\\". Las entidades son muy importantes en el modelo de dominio, ya que son la base de un modelo. Por tanto, debe identificarlas y dise\xf1arlas cuidadosamente.","sidebar":"tutorialSidebar"},"ddd/events":{"id":"ddd/events","title":"Eventos","description":"Los eventos son grandes ordenadores de los procesos de negocio y permiten descubrir y entender flujos complejos que involucran a distintos actores.","sidebar":"tutorialSidebar"},"ddd/Intro":{"id":"ddd/Intro","title":"Que es DDD","description":"El Domain-Driven Design (DDD) no es una tecnolog\xeda ni una metodolog\xeda, sino una pr\xe1ctica de desarrollo de software con necesidades complejas, que sit\xfaa el Dominio del Negocio como faro del proyecto y en su Modelo, como herramienta de comunicaci\xf3n entre negocio y tecnolog\xeda.","sidebar":"tutorialSidebar"},"ddd/services":{"id":"ddd/services","title":"Servicios","description":"Al escuchar la palabra servicio solemos pensar en un servicio que se comunica con el exterior (una API, un RPC\u2026), por eso lo primero cuando hacemos referencia a los Servicios de Dominio, es disuadir esta idea de nuestra cabeza, no, no son este tipo de servicios.","sidebar":"tutorialSidebar"},"ddd/valueobject":{"id":"ddd/valueobject","title":"Value Objects","description":"Un Value Object es un objeto que modela una entidad inmutable y sin identidad propia. Los Value Objects son utilizados para representar valores que no cambian con el tiempo y que no tienen un identificador \xfanico. Estos objetos son t\xedpicamente utilizados para modelar tipos de datos que no pueden ser modificados directamente, como fechas, direcciones, etc.","sidebar":"tutorialSidebar"},"devops/devops-makers":{"id":"devops/devops-makers","title":"Introducci\xf3n a DevOps","description":"Este patron se usa .....","sidebar":"tutorialSidebar"},"docker/sonarqube-docker":{"id":"docker/sonarqube-docker","title":"Analisis estatico SonarQube","description":"Instalacion SonarQube en Local","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"Buenas Practicas y Arquitectura","description":"Descubre como utilizar Makers Arquitectura.","sidebar":"tutorialSidebar"},"librerias/fluent-validation":{"id":"librerias/fluent-validation","title":"Fluent Validations","description":"Fluent Validation con Mediat Behaviours","sidebar":"tutorialSidebar"},"librerias/librerias-makers":{"id":"librerias/librerias-makers","title":"Librerias Makers","description":"Listado de Librerias utilizadas en MakersFunds en base a su funcionalidad.","sidebar":"tutorialSidebar"},"patrones/patro-mediator":{"id":"patrones/patro-mediator","title":"Patron Mediator","description":"Es un patr\xf3n de dise\xf1o de software de comportamiento que lo ayuda a crear un c\xf3digo m\xe1s simple al hacer que todos los componentes se comuniquen a trav\xe9s de un objeto \\"mediador\\", en lugar de hacerlo directamente entre s\xed. Esto ayuda a que el c\xf3digo permanezca altamente desacoplado y reduce la cantidad de dependencias complejas entre objetos.","sidebar":"tutorialSidebar"},"patrones/patron-adapter":{"id":"patrones/patron-adapter","title":"Patron Adapter","description":"El patr\xf3n Adapter es un patr\xf3n de dise\xf1o estructural que permite adaptar una interfaz existente a otra interfaz.","sidebar":"tutorialSidebar"},"patrones/patron-dto":{"id":"patrones/patron-dto","title":"Patron DTO","description":"Una de las problem\xe1ticas m\xe1s comunes cuando desarrollamos aplicaciones, es dise\xf1ar la forma en que la informaci\xf3n debe viajar desde la capa de servicios a las aplicaciones o capa de presentaci\xf3n, ya que muchas veces por desconocimiento o pereza, utilizamos las clases de entidades para retornar los datos, lo que ocasiona que retornemos m\xe1s datos de los necesarios o incluso, tengamos que ir en m\xe1s de una ocasi\xf3n a la capa de servicios para recuperar los datos requeridos.","sidebar":"tutorialSidebar"},"patrones/patron-facade":{"id":"patrones/patron-facade","title":"Patron Facade","description":"El patr\xf3n Facade disminuye la complejidad general de la aplicaci\xf3n, al mismo tiempo que ayuda a mover dependencias no deseadas a un solo lugar.","sidebar":"tutorialSidebar"},"patrones/patron-guard":{"id":"patrones/patron-guard","title":"Guard Clauses","description":"Qu\xe9 es un \ud835\uddda\ud835\ude02\ud835\uddee\ud835\uddff\ud835\uddf1 \ud835\uddd6\ud835\uddf9\ud835\uddee\ud835\ude02\ud835\ude00\ud835\uddf2? Es una t\xe9cnica sencilla para implementar el principio de fallo r\xe1pido. Una cl\xe1usula de protecci\xf3n genera una excepci\xf3n si la entrada no es v\xe1lida. El lugar m\xe1s com\xfan para usarlos son los constructores.","sidebar":"tutorialSidebar"},"patrones/patron-nullobject":{"id":"patrones/patron-nullobject","title":"Patron Null Object","description":"Es posible que a menudo encuentre excepciones de referencia nula en sus aplicaciones si las comprobaciones nulas no se implementan adecuadamente.","sidebar":"tutorialSidebar"},"patrones/patron-outbox":{"id":"patrones/patron-outbox","title":"Patron Outbox","description":"El Outbox Pattern es un patr\xf3n de dise\xf1o utilizado en el desarrollo de sistemas distribuidos para garantizar la consistencia y confiabilidad en el procesamiento de operaciones secundarias o eventos en una aplicaci\xf3n.","sidebar":"tutorialSidebar"},"patrones/patron-repository":{"id":"patrones/patron-repository","title":"Patron Repositorio","description":"El patr\xf3n Repository (o Repositorio, en espa\xf1ol) es probablemente uno de los m\xe1s populares entre los patrones catalogados por Eric Evans.","sidebar":"tutorialSidebar"},"patrones/patron-result":{"id":"patrones/patron-result","title":"Patron Result","description":"El patron result, ofrece una alternativa estructurada a la gesti\xf3n de errores de forma tradicional.","sidebar":"tutorialSidebar"},"patrones/patron-saga":{"id":"patrones/patron-saga","title":"Patron Saga","description":"El patr\xf3n SAGA se utiliza en sistemas distribuidos para gestionar transacciones largas y complejas de manera eficiente y consistente. Este patr\xf3n se inspira en la estructura narrativa de las sagas literarias, donde una serie de eventos est\xe1n interconectados para formar una historia coherente.","sidebar":"tutorialSidebar"},"patrones/patron-specification":{"id":"patrones/patron-specification","title":"Patron Specification","description":"El patr\xf3n de especificaci\xf3n es un patr\xf3n que nos permite encapsular alg\xfan conocimiento del dominio en una sola unidad (especificaci\xf3n) y reutilizarla en diferentes partes del c\xf3digo base.","sidebar":"tutorialSidebar"},"patrones/patron-strategy":{"id":"patrones/patron-strategy","title":"Patron Strategy","description":"El patr\xf3n estrategia (Strategy Pattern) es un patr\xf3n de tipo comportamiento (behavioral pattern), es decir, se centra en definir la forma en la que se produce el intercambio de mensajes entre distintos componentes.","sidebar":"tutorialSidebar"},"patrones/patron-unitofwork":{"id":"patrones/patron-unitofwork","title":"Patron Unit Of Work","description":"El patr\xf3n UoW  ahora gestiona los estados de la base de datos. Una vez que se completan todas las actualizaciones de las entidades en un alcance, los cambios rastreados se replican en la base de datos en una transacci\xf3n para que la base de datos refleje los cambios deseados.","sidebar":"tutorialSidebar"},"principios/dry":{"id":"principios/dry","title":"Principio DRY","description":"El principio DRY, acr\xf3nimo de \\"Don\'t Repeat Yourself\\" (en espa\xf1ol, \\"No te repitas\\"), es un concepto fundamental en la programaci\xf3n y en el desarrollo de software. Fue formulado por Andy Hunt y Dave Thomas en su libro \\"The Pragmatic Programmer\\".","sidebar":"tutorialSidebar"},"principios/kiss":{"id":"principios/kiss","title":"Principios KISS","description":"El principio KISS en el desarrollo de software es un acr\xf3nimo que significa \\"Keep It Simple, Stupid\\" (Mantenlo Simple, Est\xfapido). Este principio enfatiza la importancia de dise\xf1ar y construir sistemas de software de la manera m\xe1s simple posible, evitando la complejidad innecesaria. La idea central es que los sistemas simples son m\xe1s f\xe1ciles de entender, mantener y modificar.","sidebar":"tutorialSidebar"},"principios/solid":{"id":"principios/solid","title":"Principio SOLID","description":"Los principios SOLID son un conjunto de cinco principios de dise\xf1o de software que fueron introducidos por Robert C. Martin (tambi\xe9n conocido como Uncle Bob) a principios de la d\xe9cada de 2000. Estos principios est\xe1n dise\xf1ados para ayudar a los desarrolladores a crear sistemas de software que sean f\xe1ciles de mantener, escalables y que promuevan la flexibilidad y la reutilizaci\xf3n del c\xf3digo.","sidebar":"tutorialSidebar"},"principios/yagni":{"id":"principios/yagni","title":"Principio YAGNI","description":"El principio YAGNI, que significa \\"You Aren\'t Gonna Need It\\" (No lo vas a necesitar), es un principio fundamental en el desarrollo de software \xe1gil. Este principio aconseja a los desarrolladores no agregar funcionalidad al software hasta que sea absolutamente necesaria. La idea es evitar la sobreingenier\xeda y concentrarse en satisfacer las necesidades actuales del proyecto.","sidebar":"tutorialSidebar"},"react-makers/react-makers":{"id":"react-makers/react-makers","title":"Introducci\xf3n a React Makers","description":"Arquitectura de React","sidebar":"tutorialSidebar"},"sqlserver/Intro":{"id":"sqlserver/Intro","title":"Tipos de Bases de Datos","description":"En Makers, manejamos tres tipos de bases de datos 2 relacionales y una NOSQL.","sidebar":"tutorialSidebar"}}}}')}}]);