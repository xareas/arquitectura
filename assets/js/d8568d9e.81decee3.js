"use strict";(self.webpackChunknotification_center=self.webpackChunknotification_center||[]).push([[8020],{7272:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>t,metadata:()=>s,toc:()=>d});var a=i(4848),o=i(8453);const t={sidebar_position:4},r="Patron Mediator",s={id:"patrones/patro-mediator",title:"Patron Mediator",description:'Es un patr\xf3n de dise\xf1o de software de comportamiento que lo ayuda a crear un c\xf3digo m\xe1s simple al hacer que todos los componentes se comuniquen a trav\xe9s de un objeto "mediador", en lugar de hacerlo directamente entre s\xed. Esto ayuda a que el c\xf3digo permanezca altamente desacoplado y reduce la cantidad de dependencias complejas entre objetos.',source:"@site/docs/patrones/patro-mediator.md",sourceDirName:"patrones",slug:"/patrones/patro-mediator",permalink:"/arquitectura/docs/patrones/patro-mediator",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/patrones/patro-mediator.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Patron Specification",permalink:"/arquitectura/docs/patrones/patron-specification"},next:{title:"Patron DTO",permalink:"/arquitectura/docs/patrones/patron-dto"}},c={},d=[{value:"Implementacion Makers",id:"implementacion-makers",level:2},{value:"Registramos los Servicios del Mediador",id:"registramos-los-servicios-del-mediador",level:3},{value:"Envio Solicitudes",id:"envio-solicitudes",level:3},{value:"Envio de Notificaciones",id:"envio-de-notificaciones",level:3},{value:"Canalizaciones (Pipes)",id:"canalizaciones-pipes",level:3}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"patron-mediator",children:"Patron Mediator"}),"\n",(0,a.jsx)(n.p,{children:'Es un patr\xf3n de dise\xf1o de software de comportamiento que lo ayuda a crear un c\xf3digo m\xe1s simple al hacer que todos los componentes se comuniquen a trav\xe9s de un objeto "mediador", en lugar de hacerlo directamente entre s\xed. Esto ayuda a que el c\xf3digo permanezca altamente desacoplado y reduce la cantidad de dependencias complejas entre objetos.'}),"\n",(0,a.jsx)(n.admonition,{title:"Mediator",type:"tip",children:(0,a.jsxs)(n.p,{children:["Mas informacion del Patron en ",(0,a.jsx)(n.a,{href:"https://refactoring.guru/es/design-patterns/mediator",children:"Mediator"})]})}),"\n",(0,a.jsx)(n.h2,{id:"implementacion-makers",children:"Implementacion Makers"}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:["Para Implementar dicho patron hacemos uso de la libreria\r\n",(0,a.jsx)(n.a,{href:"https://github.com/jbogard/MediatR",children:"MediatR"})]})}),"\n",(0,a.jsx)(n.h3,{id:"registramos-los-servicios-del-mediador",children:"Registramos los Servicios del Mediador"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cs",metastring:'title="Startup.cs"',children:" public void ConfigureServices ( IServiceCollection services ) { \r\n // other services \r\n services.AddMediatR( typeof (Startup)); \r\n }\n"})}),"\n",(0,a.jsx)(n.h3,{id:"envio-solicitudes",children:"Envio Solicitudes"}),"\n",(0,a.jsxs)(n.p,{children:["Para enviar solicitudes debemos crear dos objetos, uno la solicitud y otro\r\nel controlador de solicitudes.\r\nEl objeto Solicitud, debera implementar las Intefaces ",(0,a.jsx)(n.strong,{children:"IRequest"})," o bien ",(0,a.jsx)(n.strong,{children:"IRequest< TResponse >"}),"\r\nLa primera interfaz es cuando no se retorna un resultado, y la segunda es cuando se retorna algun valor."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cs",metastring:'title="AdditionRequestHandler.cs"',children:"public class AdditionRequestHandler : IRequestHandler<AdditionRequest,int> { \r\n    public Task<int> Handle(AdditionRequest request, CancellationToken cancellationToken) { \r\n    var result = request.A + request.B; return Task.FromResult(result);\r\n }}\n"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Luego se envia la solicitud mediante MediatR"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cs",metastring:'title="Calculator.cs"',children:"public class Calculator { \r\n    private readonly IMediator _mediator; \r\n    public Calculator ( IMediator mediator ) {\r\n     _mediator = mediator; \r\n     } \r\n     public async Task< int > Add ( int a, int b ) { \r\n         var request = new AdditionRequest { A = a, B = b }; \r\n         var result = await _mediator.Send(request); \r\n         return result; \r\n     } \r\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"envio-de-notificaciones",children:"Envio de Notificaciones"}),"\n",(0,a.jsx)(n.p,{children:"El env\xedo de notificaciones es muy similar al env\xedo de solicitudes, en el sentido de que se debe crear un objeto de notificaci\xf3n y un objeto de controlador de notificaciones.\r\nLa diferencia aqu\xed es que se pueden crear m\xfaltiples objetos del controlador de notificaciones, que se llamar\xe1n cuando se env\xede una notificaci\xf3n a MediatR."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cs",metastring:'title="Notificacion.cs"',children:"public class MyNotification : INotification { \r\n// Propiedades de la Notificacion\r\n} \r\n\r\npublic class NotificationHandler : INotificationHandler<MyNotification> \r\n{\r\n     public Task Handle ( MyNotification notification, CancellationToken cancellationToken ) { // do stuff return Task.CompletedTask; } } public class MyNotificationHandler2 : INotificationHandler < MyNotification > { public Task Handle ( MyNotification notification, CancellationToken cancellationToken ) \r\n     { \r\n      // procesamos o realizamos alguna tarea\r\n       return Task.CompletedTask; \r\n     } \r\n }\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cs",metastring:'title="AdditionRequestHandler.cs"',children:"public class MyService { \r\n    private readonly IMediator _mediator; \r\n    public MyService ( IMediator mediator ) {\r\n        _mediator = mediator; \r\n    } \r\n    public async Task Execute ( ) { \r\n        var notification = new MyNotification { // initialise }; \r\n        await _mediator.Publish(notification); //Notificamos\r\n    } \r\n }\n"})}),"\n",(0,a.jsx)(n.h3,{id:"canalizaciones-pipes",children:"Canalizaciones (Pipes)"}),"\n",(0,a.jsxs)(n.p,{children:["Los comportamientos de canalizaci\xf3n son un tipo de middleware que se ejecuta antes y despu\xe9s de una solicitud (solo admite solicitudes, no notificaciones).\r\nPueden ser \xfatiles para una serie de tareas diferentes, como registro, manejo de errores, validaci\xf3n de solicitudes, etc.\r\nEn la Jerga de Mediat, a esto tipos de Midleware, suele llamarseles Behaviours.\r\n",(0,a.jsx)(n.img,{alt:"pipeline",src:i(8113).A+"",width:"1335",height:"750"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cs",metastring:'title="AdditionRequestHandler.cs"',children:'public class LoggingBehavior<TRequest,TResponse> : IPipelineBehavior<TRequest,TResponse> \r\n{ \r\n    private readonly ILogger<LoggingBehavior<TRequest, TResponse>> _logger; \r\n    public LoggingBehavior(ILogger<LoggingBehavior<TRequest,TResponse>> logger )\r\n    {\r\n         _logger = logger; \r\n    } \r\n    public async Task<TResponse> Handle ( TRequest request, CancellationToken cancellationToken, RequestHandlerDelegate<TResponse> next ) \r\n    {\r\n        _logger.LogInformation( $"Captura { typeof (TRequest).Name} " ); \r\n        // ir al siguiente comportamiento en la cadena de responsabilidades \r\n        var response = await next(); \r\n        _logger.LogInformation( $"Handled { typeof (TResponse).Name} " );\r\n        return response; \r\n   }\r\n}\n'})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8113:(e,n,i)=>{i.d(n,{A:()=>a});const a=i.p+"assets/images/pipeline-b5c4a1a72fc3fa6e04ab012f99d112f0.png"},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>s});var a=i(6540);const o={},t=a.createContext(o);function r(e){const n=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),a.createElement(t.Provider,{value:n},e.children)}}}]);