"use strict";(self.webpackChunknotification_center=self.webpackChunknotification_center||[]).push([[5667],{1746:(n,e,o)=>{o.r(e),o.d(e,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>t,metadata:()=>i,toc:()=>l});var a=o(4848),r=o(8453);const t={sidebar_position:2},s="Patron Unit Of Work",i={id:"patrones/patron-unitofwork",title:"Patron Unit Of Work",description:"El patr\xf3n UoW  ahora gestiona los estados de la base de datos. Una vez que se completan todas las actualizaciones de las entidades en un alcance, los cambios rastreados se replican en la base de datos en una transacci\xf3n para que la base de datos refleje los cambios deseados.",source:"@site/docs/patrones/patron-unitofwork.md",sourceDirName:"patrones",slug:"/patrones/patron-unitofwork",permalink:"/arquitectura/docs/patrones/patron-unitofwork",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/patrones/patron-unitofwork.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Patron Repositorio",permalink:"/arquitectura/docs/patrones/patron-repository"},next:{title:"Patron Specification",permalink:"/arquitectura/docs/patrones/patron-specification"}},c={},l=[{value:"Unit of Work con DbContext Diferentes",id:"unit-of-work-con-dbcontext-diferentes",level:2},{value:"Implementando UoW en Makers con Separation Of Concerns",id:"implementando-uow-en-makers-con-separation-of-concerns",level:2},{value:"Implementando UoW en Makers con Manejo Implicito",id:"implementando-uow-en-makers-con-manejo-implicito",level:2}];function d(n){const e={admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.h1,{id:"patron-unit-of-work",children:"Patron Unit Of Work"}),"\n",(0,a.jsx)(e.p,{children:"El patr\xf3n UoW  ahora gestiona los estados de la base de datos. Una vez que se completan todas las actualizaciones de las entidades en un alcance, los cambios rastreados se replican en la base de datos en una transacci\xf3n para que la base de datos refleje los cambios deseados.\r\nLas transacciones le permiten procesar varias operaciones de bases de datos de forma at\xf3mica. Si la transacci\xf3n se confirma, todas las operaciones se aplican correctamente a la base de datos. Si la transacci\xf3n se revierte, ninguna de las operaciones se aplica a la base de datos."}),"\n",(0,a.jsxs)(e.admonition,{type:"tip",children:[(0,a.jsx)(e.mdxAdmonitionTitle,{children:(0,a.jsx)(e.strong,{children:"Unit of Work en Entity Framework"})}),(0,a.jsxs)(e.p,{children:["Si est\xe1s usando directamente Entity Framework, sin ninguna abstracci\xf3n por encima la clase ",(0,a.jsx)(e.strong,{children:"DbContext"})," esta clase ya implementa este patr\xf3n.\r\nEs decir cuando modificas objetos obtenidos del DbContext (a trav\xe9s de uno de sus DbSet T, los a\xf1ades o eliminas, est\xe1s manteniendo esta lista de cambios en memoria.\r\nEstos cambios ser\xe1n aplicados cuando ejecutes el m\xe9todo .SaveChanges() o .SaveChangesAsync()\r\nComo ver\xe1s ya no es necesario volver a implementar por encima esta abstracci\xf3n,\r\nya que al ejecutar .SaveChanges() Entity Framework generar\xe1 el SQL correspondiente a todos los cambios y los ejecutar\xe1 dentro de una transacci\xf3n."]})]}),"\n",(0,a.jsx)(e.h2,{id:"unit-of-work-con-dbcontext-diferentes",children:"Unit of Work con DbContext Diferentes"}),"\n",(0,a.jsx)(e.p,{children:"Para Poder utilizar este patron en UoW, en contextos distintos, es necesario que comparta la\r\ntransaccion. EF, no soporta de forma nativa transacciones distribuidas."}),"\n",(0,a.jsx)(e.h2,{id:"implementando-uow-en-makers-con-separation-of-concerns",children:"Implementando UoW en Makers con Separation Of Concerns"}),"\n",(0,a.jsx)(e.p,{children:"Este patron puede ser implementando como un Behaviors de MediatR, o bien como un middleware\r\nen el pipeline de Asp.net, de esta forma si no se produce ningun tipo de error toda la operacion\r\nes confirmada. Esto se usa en marcos como Spring Boot, donde el atributo que  puedes ser establecido\r\na nivel de clase o metodo @Transactional."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-cs",metastring:'title=".Api.BookingController.cs"',children:" [HttpPost]\r\n [Transactional]\r\n public async Task<IActionResult> ReserveBooking(\r\n     ReserveBookingRequest request,\r\n     CancellationToken cancellationToken)\r\n {\r\n }\n"})}),"\n",(0,a.jsx)(e.h2,{id:"implementando-uow-en-makers-con-manejo-implicito",children:"Implementando UoW en Makers con Manejo Implicito"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Declaramos una Interfaz del Tipo UoW, en la capa de dominio\r\n.Domain.Shared"}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-cs",metastring:'title=".Domain.Shared.IUnitOfWork.cs"',children:"public interface IUnitOfWork\r\n{\r\n    Task<int> SaveChangesAsync(CancellationToken cancellationToken = default);\r\n}\n"})}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"En la capa de Infraestructura, en donde establecemos  la Context del entity framework\r\nindicamos que debe implementar dicha interfaz."}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-cs",metastring:'title=".Infraestructure.EfCore.DbFondosContext.cs"',children:'public sealed class DbFondosContext : DbContext, IUnitOfWork\r\n{\r\n    public override async Task<int> SaveChangesAsync(CancellationToken cancellationToken = default)\r\n    {\r\n        try\r\n        {\r\n             //Guardamos los datos\r\n            int result = await base.SaveChangesAsync(cancellationToken);\r\n            return result;\r\n        }\r\n        catch (DbUpdateConcurrencyException ex)\r\n        {\r\n            throw new ConcurrencyException("Concurrency exception occurred.", ex);\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Usandolo en la capa de Aplicacion, se usa tambien en el ejemplo el patron result"}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-cs",metastring:'title=".Application.ConfirmBookingCommandHandler.cs"',children:"sealed class ConfirmBookingCommandHandler : ICommandHandler<ConfirmBookingCommand>\r\n{\r\n    private readonly IBookingRepository _bookingRepository;\r\n    private readonly IUnitOfWork _unitOfWork;\r\n\r\n    public ConfirmBookingCommandHandler(\r\n        IBookingRepository bookingRepository,\r\n        IUnitOfWork unitOfWork)\r\n    {\r\n        _bookingRepository = bookingRepository;\r\n        _unitOfWork = unitOfWork;\r\n    }\r\n\r\n    public async Task<Result> Handle(\r\n        ConfirmBookingCommand request,\r\n        CancellationToken cancellationToken)\r\n    {\r\n        Booking? booking = await _bookingRepository.GetByIdAsync(request.BookingId, cancellationToken);\r\n        \r\n        if (booking is null)\r\n        {\r\n            return Result.Failure(BookingErrors.NotFound);\r\n        }\r\n        \r\n        Result result = booking.Confirm();\r\n        if (result.IsFailure)\r\n        {\r\n            return result;\r\n        }\r\n       \r\n        //UnitOfWork   \r\n        await _unitOfWork.SaveChangesAsync(cancellationToken);\r\n        return Result.Success();\r\n    }\r\n}\n"})})]})}function u(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(d,{...n})}):d(n)}},8453:(n,e,o)=>{o.d(e,{R:()=>s,x:()=>i});var a=o(6540);const r={},t=a.createContext(r);function s(n){const e=a.useContext(t);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:s(n.components),a.createElement(t.Provider,{value:e},n.children)}}}]);