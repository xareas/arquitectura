"use strict";(self.webpackChunknotification_center=self.webpackChunknotification_center||[]).push([[8861],{6164:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var t=i(4848),r=i(8453);const a={sidebar_position:3},s="Patron Specification",c={id:"patrones/patron-specification",title:"Patron Specification",description:"El patr\xf3n de especificaci\xf3n es un patr\xf3n que nos permite encapsular alg\xfan conocimiento del dominio en una sola unidad (especificaci\xf3n) y reutilizarla en diferentes partes del c\xf3digo base.",source:"@site/docs/patrones/patron-specification.md",sourceDirName:"patrones",slug:"/patrones/patron-specification",permalink:"/arquitectura/docs/patrones/patron-specification",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/patrones/patron-specification.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Patron Unit Of Work",permalink:"/arquitectura/docs/patrones/patron-unitofwork"},next:{title:"Patron Mediator",permalink:"/arquitectura/docs/patrones/patro-mediator"}},o={},l=[{value:"Implementaci\xf3n Makers",id:"implementaci\xf3n-makers",level:2}];function p(e){const n={code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"patron-specification",children:"Patron Specification"}),"\n",(0,t.jsx)(n.p,{children:"El patr\xf3n de especificaci\xf3n es un patr\xf3n que nos permite encapsular alg\xfan conocimiento del dominio en una sola unidad (especificaci\xf3n) y reutilizarla en diferentes partes del c\xf3digo base.\r\nHay distintas implementaciones de este patron, pero me gustaria mostrar la que es nativa de .NET. La primera soluci\xf3n que te viene a la mente cuando te enfrentas al problema descrito anteriormente es usar expresiones de C#. En gran medida, ellos mismos son una implementaci\xf3n del patr\xf3n de especificaci\xf3n."}),"\n",(0,t.jsx)(n.h2,{id:"implementaci\xf3n-makers",children:"Implementaci\xf3n Makers"}),"\n",(0,t.jsxs)(n.p,{children:["Para entender la idea del patron mostramos codigo que es parte de la libreria\r\n",(0,t.jsx)(n.strong,{children:"Makers.ADF"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Declaramos una interfaz"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cs",metastring:'title="ISpecification.cs"',children:" public interface ISpecification<T>\r\n    {\r\n        bool IsSatisfiedBy(T obj);\r\n        Expression<Func<T, bool>> ToExpression();\r\n    }\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Implementamos La interfaz"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cs",metastring:'title="Specification.cs"',children:" public abstract class Specification<T> : ISpecification<T>\r\n{\r\n    public abstract Expression<Func<T , bool>> ToExpression();\r\n     public bool IsSatisfiedBy(T entity)\r\n    {\r\n        Func<T,bool> predicate = ToExpression().Compile();\r\n        return predicate(entity);\r\n    }\r\n}\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Implementamos una especificacion de una clase Cliente que contiene un campo\r\nrating."}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cs",metastring:'title="Cliente.cs"',children:" public class Cliente : Entity\r\n{\r\n    public string Name { get; }\r\n    public double Rating { get; }\r\n}\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cs",metastring:'title="ClienteSpecification.cs"',children:" public class ClienteSpecification : Specification<Cliente>\r\n{\r\n    private readonly Rating _rating;\r\n \r\n    public ClienteSpecification(double rating)\r\n    {\r\n        _rating = rating;\r\n    }\r\n \r\n    public override Expression<Func<Movie, bool>> ToExpression()\r\n    {\r\n        return cliente => cliente.Rating <= _rating;\r\n    }\r\n}\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Luego la podemos invocar asi."}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cs",metastring:'title="ClientePruebaEspecification.cs"',children:" \r\n //Definimos nuestra especifiacion\r\n ISpecification spec = new MovieSpecification(12);\r\n \r\n //Obtener los datos, con el filtro establecido.\r\n Movie.Where( spec.IsSatisfiedBy );\r\n \n"})})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>c});var t=i(6540);const r={},a=t.createContext(r);function s(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);