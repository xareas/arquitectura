"use strict";(self.webpackChunknotification_center=self.webpackChunknotification_center||[]).push([[3741],{6010:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>p});var n=r(4848),t=r(8453);const s={sidebar_position:1},i="Patron Adapter",o={id:"patrones/patron-adapter",title:"Patron Adapter",description:"El patr\xf3n Adapter es un patr\xf3n de dise\xf1o estructural que permite adaptar una interfaz existente a otra interfaz.",source:"@site/docs/patrones/patron-adapter.md",sourceDirName:"patrones",slug:"/patrones/patron-adapter",permalink:"/arquitectura/docs/patrones/patron-adapter",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/patrones/patron-adapter.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Patrones Arquitectura",permalink:"/arquitectura/docs/category/patrones-arquitectura"},next:{title:"Patron Repositorio",permalink:"/arquitectura/docs/patrones/patron-repository"}},c={},p=[{value:"Ejemplo aplicado a Makers",id:"ejemplo-aplicado-a-makers",level:2}];function u(e){const a={a:"a",code:"code",h1:"h1",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(a.h1,{id:"patron-adapter",children:"Patron Adapter"}),"\n",(0,n.jsxs)(a.p,{children:["El patr\xf3n ",(0,n.jsx)(a.strong,{children:"Adapter"})," es un patr\xf3n de dise\xf1o estructural que permite adaptar una interfaz existente a otra interfaz.\r\nEn otras palabras, el adaptador act\xfaa como un intermediario entre dos interfaces incompatibles y proporciona una capa adicional de abstracci\xf3n\r\npara permitir que los objetos trabajen juntos."]}),"\n",(0,n.jsx)(a.p,{children:(0,n.jsx)(a.img,{alt:"Layared",src:r(934).A+"",width:"1060",height:"700"})}),"\n",(0,n.jsx)(a.p,{children:(0,n.jsx)(a.a,{href:"https://refactoring.guru/es/design-patterns/adapter",children:"Mas Informaci\xf3n del Patr\xf3n..."})}),"\n",(0,n.jsx)(a.h2,{id:"ejemplo-aplicado-a-makers",children:"Ejemplo aplicado a Makers"}),"\n",(0,n.jsx)(a.p,{children:"Supongamos que necesitamos referirnos a una cola de mensajes que podria\r\nestar implementada en Rabbit o bien AWS SQS.\r\nNecesitamos enviar nuestro mensaje desde la capa de aplicaci\xf3n."}),"\n",(0,n.jsx)(a.p,{children:"En la arquitectura limpia, tambi\xe9n conocida como arquitectura hexagonal o arquitectura de puertos y adaptadores,\r\nla comunicaci\xf3n con elementos externos como colas de mensajes se gestiona a trav\xe9s de interfaces."}),"\n",(0,n.jsxs)(a.ul,{children:["\n",(0,n.jsx)(a.li,{children:"Crea un interfaz en la capa de dominio"}),"\n"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-cs",metastring:'title="IMessageQueueService.cs"',children:"public interface IMessageQueueService\r\n{\r\n    void SendMessage(string message);\r\n}\n"})}),"\n",(0,n.jsxs)(a.ul,{children:["\n",(0,n.jsx)(a.li,{children:"Implementamos la Interfaz en la capa de Infraestructura, en este\r\ncaso realizamos una implementacion tanto para Rabbit como para AWS SQS."}),"\n"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-cs",metastring:'title="RabbitMQService.cs/AWSMQService.cs"',children:"public class RabbitMQService : IMessageQueueService\r\n{\r\n   public void SendMessage(string message){}\r\n}\r\n\r\npublic class AWSMQService : IMessageQueueService\r\n{\r\n   public void SendMessage(string message){}\r\n}\n"})}),"\n",(0,n.jsxs)(a.ul,{children:["\n",(0,n.jsx)(a.li,{children:"Por ultimo en la capa de aplicacion  utilizamos una\r\nimplementacion concreta."}),"\n"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-cs",metastring:'title="BrokerAppService.cs"',children:"public class BrokerAppService\r\n{\r\n    private readonly IMessageQueueService _messageQueueService;\r\n\r\n    public BrokerAppService(IMessageQueueService messageQueueService)\r\n    {\r\n        _messageQueueService = messageQueueService;\r\n    }\r\n\r\n    public void SendMessageToQueue(string message)\r\n    {\r\n        _messageQueueService.SendMessage(message);\r\n    }\r\n}\n"})})]})}function d(e={}){const{wrapper:a}={...(0,t.R)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}},934:(e,a,r)=>{r.d(a,{A:()=>n});const n=r.p+"assets/images/adapter-8e6daf061370115feb7ea8e347338eb7.png"},8453:(e,a,r)=>{r.d(a,{R:()=>i,x:()=>o});var n=r(6540);const t={},s=n.createContext(t);function i(e){const a=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function o(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),n.createElement(s.Provider,{value:a},e.children)}}}]);