"use strict";(self.webpackChunknotification_center=self.webpackChunknotification_center||[]).push([[6671],{3806:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>t,toc:()=>d});var o=n(4848),a=n(8453);const r={sidebar_position:3},s="Principio DRY",t={id:"principios/dry",title:"Principio DRY",description:'El principio DRY, acr\xf3nimo de "Don\'t Repeat Yourself" (en espa\xf1ol, "No te repitas"), es un concepto fundamental en la programaci\xf3n y en el desarrollo de software. Fue formulado por Andy Hunt y Dave Thomas en su libro "The Pragmatic Programmer".',source:"@site/docs/principios/dry.md",sourceDirName:"principios",slug:"/principios/dry",permalink:"/arquitectura/docs/principios/dry",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/principios/dry.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Principios KISS",permalink:"/arquitectura/docs/principios/kiss"},next:{title:"Principio YAGNI",permalink:"/arquitectura/docs/principios/yagni"}},c={},d=[{value:"Beneficios DRY:",id:"beneficios-dry",level:2}];function l(e){const i={admonition:"admonition",h1:"h1",h2:"h2",li:"li",p:"p",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(i.h1,{id:"principio-dry",children:"Principio DRY"}),"\n",(0,o.jsx)(i.p,{children:'El principio DRY, acr\xf3nimo de "Don\'t Repeat Yourself" (en espa\xf1ol, "No te repitas"), es un concepto fundamental en la programaci\xf3n y en el desarrollo de software. Fue formulado por Andy Hunt y Dave Thomas en su libro "The Pragmatic Programmer".\r\nEl principio establece la idea de que cada pieza de conocimiento en un sistema debe tener una \xfanica,'}),"\n",(0,o.jsx)(i.admonition,{title:"DRY",type:"tip",children:(0,o.jsx)(i.p,{children:"Este es un principio fundamental en el dise\xf1o de software y la programaci\xf3n, que promueve la reducci\xf3n de duplicaci\xf3n de c\xf3digo y l\xf3gica. El objetivo del principio DRY es evitar la redundancia en el c\xf3digo, lo cual se puede lograr asegurando que cada pieza de conocimiento, l\xf3gica o funcionalidad est\xe9 representada en un \xfanico lugar dentro del sistema"})}),"\n",(0,o.jsx)(i.h2,{id:"beneficios-dry",children:"Beneficios DRY:"}),"\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsxs)(i.li,{children:["\n",(0,o.jsxs)(i.p,{children:[(0,o.jsx)(i.strong,{children:"Reducci\xf3n de la Duplicaci\xf3n:"})," Evita la duplicaci\xf3n de c\xf3digo y l\xf3gica, lo que facilita el mantenimiento y actualizaci\xf3n del software. Si una funcionalidad cambia, solo hay que modificarla en un lugar."]}),"\n"]}),"\n",(0,o.jsxs)(i.li,{children:["\n",(0,o.jsxs)(i.p,{children:[(0,o.jsx)(i.strong,{children:"Claridad y Legibilidad:"})," El c\xf3digo es m\xe1s limpio y m\xe1s f\xe1cil de entender. Al eliminar redundancias, el c\xf3digo se vuelve m\xe1s claro para otros desarrolladores que puedan trabajar en el mismo proyecto."]}),"\n"]}),"\n",(0,o.jsxs)(i.li,{children:["\n",(0,o.jsxs)(i.p,{children:[(0,o.jsx)(i.strong,{children:"Mantenibilidad:"})," Menos c\xf3digo duplicado significa menos lugares donde pueden surgir errores, y cualquier correcci\xf3n o mejora se propaga autom\xe1ticamente a todas las partes del sistema que dependen de ese c\xf3digo."]}),"\n"]}),"\n",(0,o.jsxs)(i.li,{children:["\n",(0,o.jsxs)(i.p,{children:[(0,o.jsx)(i.strong,{children:"Consistencia:"})," Asegura que el comportamiento del sistema sea consistente, ya que todos los componentes que dependen de un determinado fragmento de l\xf3gica usan exactamente la misma implementaci\xf3n."]}),"\n"]}),"\n"]})]})}function u(e={}){const{wrapper:i}={...(0,a.R)(),...e.components};return i?(0,o.jsx)(i,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>s,x:()=>t});var o=n(6540);const a={},r=o.createContext(a);function s(e){const i=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function t(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),o.createElement(r.Provider,{value:i},e.children)}}}]);